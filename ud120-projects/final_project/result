#!/bin/sh

# initial features
features_list = ['poi', 'salary']
GaussianNB()
	Accuracy: 0.79840	Precision: 0.48095	Recall: 0.10100	F1: 0.16694	F2: 0.11995
	Total predictions: 10000	True positives:  202	False positives:  218	False negatives: 1798	False negatives: 7782
----------------------------------------------------------------------
# all features
features_list = ['poi', 'salary', 'deferral_payments', 'total_payments', 'loan_advances', 'bonus',
                 'restricted_stock_deferred', 'deferred_income', 'total_stock_value', 'expenses',
                 'exercised_stock_options', 'other', 'long_term_incentive', 'restricted_stock', 'director_fees',
                 'to_messages', 'from_poi_to_this_person', 'from_messages', 'from_this_person_to_poi',
                 'shared_receipt_with_poi']
GaussianNB()
	Accuracy: 0.33260	Precision: 0.14644	Recall: 0.82950	F1: 0.24893	F2: 0.42915
	Total predictions: 15000	True positives: 1659	False positives: 9670	False negatives:  341	False negatives: 3330
	--------------------------------------------------------------------------------------------------------------

features_list = ['poi', 'salary', 'bonus', 'total_payments', 'expenses', 'total_stock_value', 'from_poi_to_this_person',
                 'from_this_person_to_poi']

GridSearchCV(cv=None,
       estimator=Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=5, whiten=False)), ('tree', DecisionTreeClassifier(compute_importances=None, criterion='gini',
            max_depth=None, max_features=None, max_leaf_nodes=None,
            min_density=None, min_samples_leaf=1, min_samples_split=2,
            random_state=None, splitter='best'))]),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'tree__min_samples_split': [2, 3, 4, 10], 'reduce_dim__n_components': [3, 5, 7], 'tree__random_state': [0, 1, 2, 3]},
       pre_dispatch='2*n_jobs', refit=True, score_func=None, scoring=None,
       verbose=0)
Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=5, whiten=False)), ('tree', DecisionTreeClassifier(compute_importances=None, criterion='gini',
            max_depth=None, max_features=None, max_leaf_nodes=None,
            min_density=None, min_samples_leaf=1, min_samples_split=10,
            random_state=1, splitter='best'))])
	Accuracy: 0.78653	Precision: 0.20365	Recall: 0.20650	F1: 0.20506	F2: 0.20592
	Total predictions: 15000	True positives:  413	False positives: 1615	False negatives: 1587	False negatives: 11385

GridSearchCV(cv=None,
       estimator=Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=5, whiten=False)), ('ada', AdaBoostClassifier(algorithm='SAMME.R', base_estimator=None,
          learning_rate=1.0, n_estimators=50, random_state=None))]),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'ada__n_estimators': [10, 25, 50, 75, 100], 'reduce_dim__n_components': [3, 5, 7], 'ada__algorithm': ['SAMME', 'SAMME.R']},
       pre_dispatch='2*n_jobs', refit=True, score_func=None, scoring=None,
       verbose=0)
Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=5, whiten=False)), ('ada', AdaBoostClassifier(algorithm='SAMME', base_estimator=None, learning_rate=1.0,
          n_estimators=75, random_state=None))])
	Accuracy: 0.82727	Precision: 0.25396	Recall: 0.15250	F1: 0.19057	F2: 0.16574
	Total predictions: 15000	True positives:  305	False positives:  896	False negatives: 1695	False negatives: 12104
----------------------------------------------------------------------------

features_list = ['poi', 'salary', 'bonus']

C:\Python27_64\python.exe C:/DataAnalystDegree/DataAnalystNanodegree/ud120-projects/final_project/multi_tester.py
GridSearchCV(cv=None,
       estimator=Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=5, whiten=False)), ('forest', RandomForestClassifier(bootstrap=True, compute_importances=None,
            criterion='gini', max_depth=None, max_features='auto',
            max_leaf_nodes=None, min_density=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=10, n_jobs=1,
            oob_score=False, random_state=None, verbose=0))]),
       fit_params={}, iid=True, loss_func=None, n_jobs=-1,
       param_grid={'reduce_dim__n_components': [1, 2], 'forest__n_estimators': [1, 10, 50, 100, 1000], 'forest__random_state': [None, 1, 2, 5, 10]},
       pre_dispatch='2*n_jobs', refit=True, score_func=None, scoring=None,
       verbose=0)
Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=2, whiten=False)), ('forest', RandomForestClassifier(bootstrap=True, compute_importances=None,
            criterion='gini', max_depth=None, max_features='auto',
            max_leaf_nodes=None, min_density=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=10, n_jobs=1,
            oob_score=False, random_state=1, verbose=0))])
	Accuracy: 0.71640	Precision: 0.13841	Recall: 0.08000	F1: 0.10139	F2: 0.08737
	Total predictions: 10000	True positives:  160	False positives:  996	False negatives: 1840	False negatives: 7004

GridSearchCV(cv=None,
       estimator=Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=5, whiten=False)), ('tree', DecisionTreeClassifier(compute_importances=None, criterion='gini',
            max_depth=None, max_features=None, max_leaf_nodes=None,
            min_density=None, min_samples_leaf=1, min_samples_split=2,
            random_state=None, splitter='best'))]),
       fit_params={}, iid=True, loss_func=None, n_jobs=-1,
       param_grid={'tree__min_samples_split': [2, 3, 4, 10], 'reduce_dim__n_components': [1, 2], 'tree__random_state': [0, 1, 2, 3]},
       pre_dispatch='2*n_jobs', refit=True, score_func=None, scoring=None,
       verbose=0)
Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=1, whiten=False)), ('tree', DecisionTreeClassifier(compute_importances=None, criterion='gini',
            max_depth=None, max_features=None, max_leaf_nodes=None,
            min_density=None, min_samples_leaf=1, min_samples_split=10,
            random_state=0, splitter='best'))])
	Accuracy: 0.71400	Precision: 0.20588	Recall: 0.15050	F1: 0.17389	F2: 0.15906
	Total predictions: 10000	True positives:  301	False positives: 1161	False negatives: 1699	False negatives: 6839

GridSearchCV(cv=None,
       estimator=Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=5, whiten=False)), ('ada', AdaBoostClassifier(algorithm='SAMME.R', base_estimator=None,
          learning_rate=1.0, n_estimators=50, random_state=None))]),
       fit_params={}, iid=True, loss_func=None, n_jobs=-1,
       param_grid={'ada__n_estimators': [10, 25, 50, 75, 100], 'reduce_dim__n_components': [1, 2], 'ada__algorithm': ['SAMME', 'SAMME.R']},
       pre_dispatch='2*n_jobs', refit=True, score_func=None, scoring=None,
       verbose=0)
Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=1, whiten=False)), ('ada', AdaBoostClassifier(algorithm='SAMME', base_estimator=None, learning_rate=1.0,
          n_estimators=10, random_state=None))])
	Accuracy: 0.78580	Precision: 0.10556	Recall: 0.00950	F1: 0.01743	F2: 0.01161
	Total predictions: 10000	True positives:   19	False positives:  161	False negatives: 1981	False negatives: 7839

