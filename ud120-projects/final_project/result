#!/bin/sh

# initial features
features_list = ['poi', 'salary']
#GaussianNB()
	Accuracy: 0.79840	Precision: 0.48095	Recall: 0.10100	F1: 0.16694	F2: 0.11995
	Total predictions: 10000	True positives:  202	False positives:  218	False negatives: 1798	False negatives: 7782
----------------------------------------------------------------------
# all features
features_list = ['poi', 'salary', 'deferral_payments', 'total_payments', 'loan_advances', 'bonus',
                 'restricted_stock_deferred', 'deferred_income', 'total_stock_value', 'expenses',
                 'exercised_stock_options', 'other', 'long_term_incentive', 'restricted_stock', 'director_fees',
                 'to_messages', 'from_poi_to_this_person', 'from_messages', 'from_this_person_to_poi',
                 'shared_receipt_with_poi']
#GaussianNB()
	Accuracy: 0.33260	Precision: 0.14644	Recall: 0.82950	F1: 0.24893	F2: 0.42915
	Total predictions: 15000	True positives: 1659	False positives: 9670	False negatives:  341	False negatives: 3330
	--------------------------------------------------------------------------------------------------------------

features_list = ['poi', 'salary', 'bonus', 'total_payments', 'expenses', 'total_stock_value', 'from_poi_to_this_person',
                 'from_this_person_to_poi']

GridSearchCV(cv=None,
       estimator=Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=5, whiten=False)), ('tree', DecisionTreeClassifier(compute_importances=None, criterion='gini',
            max_depth=None, max_features=None, max_leaf_nodes=None,
            min_density=None, min_samples_leaf=1, min_samples_split=2,
            random_state=None, splitter='best'))]),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'tree__min_samples_split': [2, 3, 4, 10], 'reduce_dim__n_components': [3, 5, 7], 'tree__random_state': [0, 1, 2, 3]},
       pre_dispatch='2*n_jobs', refit=True, score_func=None, scoring=None,
       verbose=0)
Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=5, whiten=False)), ('tree', DecisionTreeClassifier(compute_importances=None, criterion='gini',
            max_depth=None, max_features=None, max_leaf_nodes=None,
            min_density=None, min_samples_leaf=1, min_samples_split=10,
            random_state=1, splitter='best'))])
	Accuracy: 0.78653	Precision: 0.20365	Recall: 0.20650	F1: 0.20506	F2: 0.20592
	Total predictions: 15000	True positives:  413	False positives: 1615	False negatives: 1587	False negatives: 11385

GridSearchCV(cv=None,
       estimator=Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=5, whiten=False)), ('ada', AdaBoostClassifier(algorithm='SAMME.R', base_estimator=None,
          learning_rate=1.0, n_estimators=50, random_state=None))]),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'ada__n_estimators': [10, 25, 50, 75, 100], 'reduce_dim__n_components': [3, 5, 7], 'ada__algorithm': ['SAMME', 'SAMME.R']},
       pre_dispatch='2*n_jobs', refit=True, score_func=None, scoring=None,
       verbose=0)
Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=5, whiten=False)), ('ada', AdaBoostClassifier(algorithm='SAMME', base_estimator=None, learning_rate=1.0,
          n_estimators=75, random_state=None))])
	Accuracy: 0.82727	Precision: 0.25396	Recall: 0.15250	F1: 0.19057	F2: 0.16574
	Total predictions: 15000	True positives:  305	False positives:  896	False negatives: 1695	False negatives: 12104
----------------------------------------------------------------------------

features_list = ['poi', 'salary', 'bonus']

C:\Python27_64\python.exe C:/DataAnalystDegree/DataAnalystNanodegree/ud120-projects/final_project/multi_tester.py
GridSearchCV(cv=None,
       estimator=Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=5, whiten=False)), ('forest', RandomForestClassifier(bootstrap=True, compute_importances=None,
            criterion='gini', max_depth=None, max_features='auto',
            max_leaf_nodes=None, min_density=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=10, n_jobs=1,
            oob_score=False, random_state=None, verbose=0))]),
       fit_params={}, iid=True, loss_func=None, n_jobs=-1,
       param_grid={'reduce_dim__n_components': [1, 2], 'forest__n_estimators': [1, 10, 50, 100, 1000], 'forest__random_state': [None, 1, 2, 5, 10]},
       pre_dispatch='2*n_jobs', refit=True, score_func=None, scoring=None,
       verbose=0)
Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=2, whiten=False)), ('forest', RandomForestClassifier(bootstrap=True, compute_importances=None,
            criterion='gini', max_depth=None, max_features='auto',
            max_leaf_nodes=None, min_density=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=10, n_jobs=1,
            oob_score=False, random_state=1, verbose=0))])
	Accuracy: 0.71640	Precision: 0.13841	Recall: 0.08000	F1: 0.10139	F2: 0.08737
	Total predictions: 10000	True positives:  160	False positives:  996	False negatives: 1840	False negatives: 7004

GridSearchCV(cv=None,
       estimator=Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=5, whiten=False)), ('tree', DecisionTreeClassifier(compute_importances=None, criterion='gini',
            max_depth=None, max_features=None, max_leaf_nodes=None,
            min_density=None, min_samples_leaf=1, min_samples_split=2,
            random_state=None, splitter='best'))]),
       fit_params={}, iid=True, loss_func=None, n_jobs=-1,
       param_grid={'tree__min_samples_split': [2, 3, 4, 10], 'reduce_dim__n_components': [1, 2], 'tree__random_state': [0, 1, 2, 3]},
       pre_dispatch='2*n_jobs', refit=True, score_func=None, scoring=None,
       verbose=0)
Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=1, whiten=False)), ('tree', DecisionTreeClassifier(compute_importances=None, criterion='gini',
            max_depth=None, max_features=None, max_leaf_nodes=None,
            min_density=None, min_samples_leaf=1, min_samples_split=10,
            random_state=0, splitter='best'))])
	Accuracy: 0.71400	Precision: 0.20588	Recall: 0.15050	F1: 0.17389	F2: 0.15906
	Total predictions: 10000	True positives:  301	False positives: 1161	False negatives: 1699	False negatives: 6839

GridSearchCV(cv=None,
       estimator=Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=5, whiten=False)), ('ada', AdaBoostClassifier(algorithm='SAMME.R', base_estimator=None,
          learning_rate=1.0, n_estimators=50, random_state=None))]),
       fit_params={}, iid=True, loss_func=None, n_jobs=-1,
       param_grid={'ada__n_estimators': [10, 25, 50, 75, 100], 'reduce_dim__n_components': [1, 2], 'ada__algorithm': ['SAMME', 'SAMME.R']},
       pre_dispatch='2*n_jobs', refit=True, score_func=None, scoring=None,
       verbose=0)
Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=1, whiten=False)), ('ada', AdaBoostClassifier(algorithm='SAMME', base_estimator=None, learning_rate=1.0,
          n_estimators=10, random_state=None))])
	Accuracy: 0.78580	Precision: 0.10556	Recall: 0.00950	F1: 0.01743	F2: 0.01161
	Total predictions: 10000	True positives:   19	False positives:  161	False negatives: 1981	False negatives: 7839

GridSearchCV(cv=None,
       estimator=Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=5, whiten=False)), ('svc', SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel='rbf', max_iter=-1, probability=False, random_state=None,
  shrinking=True, tol=0.001, verbose=False))]),
       fit_params={}, iid=True, loss_func=None, n_jobs=-1,
       param_grid={'svc__gamma': [0.0, 0.0001, 0.0005, 0.001, 0.005, 0.01, 0.1], 'svc__kernel': ['linear', 'rbf'], 'svc__C': [1, 10, 100, 1000.0, 5000.0], 'reduce_dim__n_components': [1, 2]},
       pre_dispatch='2*n_jobs', refit=True, score_func=None, scoring=None,
       verbose=0)
Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=1, whiten=False)), ('svc', SVC(C=1, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel='linear', max_iter=-1, probability=False, random_state=None,
  shrinking=True, tol=0.001, verbose=False))])
	Accuracy: 0.79380	Precision: 0.23276	Recall: 0.01350	F1: 0.02552	F2: 0.01663
	Total predictions: 10000	True positives:   27	False positives:   89	False negatives: 1973	False negatives: 7911

	----------------------------------------------------------------------------------------

features_list = ['poi', 'salary', 'bonus', 'total_payments', 'expenses', 'total_stock_value', 'loan_advances',
                 'from_poi_to_this_person', 'from_this_person_to_poi', 'fraction_from_poi', 'fraction_to_poi']

GridSearchCV(cv=None,
       estimator=Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=None, whiten=False)), ('ada', AdaBoostClassifier(algorithm='SAMME.R', base_estimator=None,
          learning_rate=1.0, n_estimators=50, random_state=None))]),
       fit_params={}, iid=True, loss_func=None, n_jobs=-1,
       param_grid={'ada__n_estimators': [10, 25, 50, 75, 100], 'reduce_dim__n_components': [5, 8, 10], 'ada__algorithm': ['SAMME', 'SAMME.R']},
       pre_dispatch='2*n_jobs', refit=True, score_func=None, scoring=None,
       verbose=0)
{'ada__n_estimators': 25, 'reduce_dim__n_components': 10, 'ada__algorithm': 'SAMME.R'}
Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=10, whiten=False)), ('ada', AdaBoostClassifier(algorithm='SAMME.R', base_estimator=None,
          learning_rate=1.0, n_estimators=25, random_state=None))])

----------------------------------------------------------------------------------------------
thursday night

Connected to pydev debugger (build 139.1001)
GridSearchCV(cv=None,
       estimator=Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=None, whiten=False)), ('tree', DecisionTreeClassifier(compute_importances=None, criterion='gini',
            max_depth=None, max_features=None, max_leaf_nodes=None,
            min_density=None, min_samples_leaf=1, min_samples_split=2,
            random_state=None, splitter='best'))]),
       fit_params={}, iid=True, loss_func=None, n_jobs=-1,
       param_grid={'tree__min_samples_split': [2, 3, 4, 10], 'reduce_dim__n_components': [3, 9, 10], 'tree__random_state': [0, 1, 2, 3]},
       pre_dispatch='2*n_jobs', refit=True, score_func=None, scoring=None,
       verbose=0)
Best Params:  {'tree__min_samples_split': 2, 'reduce_dim__n_components': 3, 'tree__random_state': 2}
Best Estimator:  Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=3, whiten=False)), ('tree', DecisionTreeClassifier(compute_importances=None, criterion='gini',
            max_depth=None, max_features=None, max_leaf_nodes=None,
            min_density=None, min_samples_leaf=1, min_samples_split=2,
            random_state=2, splitter='best'))])
	Accuracy: 0.78980	Precision: 0.19958	Recall: 0.19150	F1: 0.19546	F2: 0.19306
	Total predictions: 15000	True positives:  383	False positives: 1536	False negatives: 1617	False negatives: 11464

classifier time: 15792.907 s


GridSearchCV(cv=None,
       estimator=Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=None, whiten=False)), ('forest', RandomForestClassifier(bootstrap=True, compute_importances=None,
            criterion='gini', max_depth=None, max_features='auto',
            max_leaf_nodes=None, min_density=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=10, n_jobs=1,
            oob_score=False, random_state=None, verbose=0))]),
       fit_params={}, iid=True, loss_func=None, n_jobs=-1,
       param_grid={'reduce_dim__n_components': [3, 9, 10], 'forest__n_estimators': [1, 10, 50, 100, 1000], 'forest__random_state': [None, 1, 2, 5, 10]},
       pre_dispatch='2*n_jobs', refit=True, score_func=None, scoring=None,
       verbose=0)
Best Params:  {'reduce_dim__n_components': 10, 'forest__n_estimators': 10, 'forest__random_state': 2}
Best Estimator:  Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=10, whiten=False)), ('forest', RandomForestClassifier(bootstrap=True, compute_importances=None,
            criterion='gini', max_depth=None, max_features='auto',
            max_leaf_nodes=None, min_density=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=10, n_jobs=1,
            oob_score=False, random_state=2, verbose=0))])
	Accuracy: 0.83527	Precision: 0.17427	Recall: 0.06300	F1: 0.09254	F2: 0.07222
	Total predictions: 15000	True positives:  126	False positives:  597	False negatives: 1874	False negatives: 12403

classifier time: 46683.711 s

list
feature_list ['poi', 'salary', 'bonus', 'total_payments', 'expenses', 'total_stock_value', 'loan_advances', 'from_poi_to_this_person',
'from_this_person_to_poi', 'fraction_from_poi', 'fraction_to_poi']
feature_importances_ [ 0.28  0.04  0.08  0.12  0.08  0.08  0.08  0.04  0.12  0.08]
GridSearchCV(cv=None,
       estimator=Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=None, whiten=False)), ('ada', AdaBoostClassifier(algorithm='SAMME.R', base_estimator=None,
          learning_rate=1.0, n_estimators=50, random_state=None))]),
       fit_params={}, iid=True, loss_func=None, n_jobs=-1,
       param_grid={'ada__n_estimators': [10, 25, 50, 75, 100], 'reduce_dim__n_components': [3, 9, 10], 'ada__algorithm': ['SAMME', 'SAMME.R']},
       pre_dispatch='2*n_jobs', refit=True, score_func=None, scoring=None,
       verbose=0)
Best Params:  {'ada__n_estimators': 25, 'reduce_dim__n_components': 10, 'ada__algorithm': 'SAMME.R'}
Best Estimator:  Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=10, whiten=False)), ('ada', AdaBoostClassifier(algorithm='SAMME.R', base_estimator=None,
          learning_rate=1.0, n_estimators=25, random_state=None))])

	Accuracy: 0.82720	Precision: 0.15899	Recall: 0.06900	F1: 0.09623	F2: 0.07781
	Total predictions: 15000	True positives:  138	False positives:  730	False negatives: 1862	False negatives: 12270

classifier time: 11488.664 s





GridSearchCV(cv=None,
       estimator=Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=None, whiten=False)), ('svc', SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3, gamma=0.0,
  kernel='rbf', max_iter=-1, probability=False, random_state=None,
  shrinking=True, tol=0.001, verbose=False))]),
       fit_params={}, iid=True, loss_func=None, n_jobs=-1,
       param_grid={'svc__gamma': [0.0, 0.0001, 0.0005, 0.001, 0.005, 0.01, 0.1], 'svc__kernel': ['linear', 'rbf'], 'svc__C': [1, 10, 100, 1000.0, 5000.0], 'reduce_dim__n_components': [3, 9, 10]},
       pre_dispatch='2*n_jobs', refit=True, score_func=None, scoring=None,
       verbose=0)
Best Params:  {'svc__gamma': 0.005, 'svc__kernel': 'rbf', 'svc__C': 100, 'reduce_dim__n_components': 3}
Best Estimator:  Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=3, whiten=False)), ('svc', SVC(C=100, cache_size=200, class_weight=None, coef0=0.0, degree=3,
  gamma=0.005, kernel='rbf', max_iter=-1, probability=False,
  random_state=None, shrinking=True, tol=0.001, verbose=False))])

Accuracy: 0.85733	Precision: 0.14286	Recall: 0.01400	F1: 0.02550	F2: 0.01708
	Total predictions: 15000	True positives:   28	False positives:  168	False negatives: 1972	False negatives: 12832

classifier time: 80978.645 s

support_ = [  1  11  14  16  17  22  26  34  35  43  60  71  76  77  78  79  85 110
 117 126   7   8   9  12  13  46  52  67  72  83  84  91  96 101 103]

 support_vectors_ = screenshot

 n_support_ = [20 15]
 ---------------------------------------------------------------------------------------------------

 saturday morning

 feature_list =         ['salary', 'bonus',     'total_payments',   'expenses',     'from_poi_to_this_person', 'from_this_person_to_poi', 'fraction_from_poi', 'fraction_to_poi']
 feature_importances_ [ 0.3041774   0.15364583  0.15232339          0.07931933      0.08862987                  0.10243056                  0.08332166          0.03615196]

GridSearchCV(cv=None,
       estimator=Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=None, whiten=False)), ('tree', DecisionTreeClassifier(compute_importances=None, criterion='gini',
            max_depth=None, max_features=None, max_leaf_nodes=None,
            min_density=None, min_samples_leaf=1, min_samples_split=2,
            random_state=None, splitter='best'))]),
       fit_params={}, iid=True, loss_func=None, n_jobs=-1,
       param_grid={'tree__min_samples_split': [2, 4], 'reduce_dim__n_components': [4, 6, 8], 'tree__random_state': [0, 1, 2, 3]},
       pre_dispatch='2*n_jobs', refit=True, score_func=None,
       scoring='recall', verbose=0)
Best Params:  {'tree__min_samples_split': 2, 'reduce_dim__n_components': 8, 'tree__random_state': 0}
Best Estimator:  Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=8, whiten=False)), ('tree', DecisionTreeClassifier(compute_importances=None, criterion='gini',
            max_depth=None, max_features=None, max_leaf_nodes=None,
            min_density=None, min_samples_leaf=1, min_samples_split=2,
            random_state=0, splitter='best'))])
	Accuracy: 0.77386	Precision: 0.22343	Recall: 0.23550	F1: 0.22931	F2: 0.23298
	Total predictions: 14000	True positives:  471	False positives: 1637	False negatives: 1529	False negatives: 10363
classifier time: 11201.9 s

-------------------------------------------------------------------------------
single tests
features_list = ['poi', 'salary', 'bonus', 'total_payments', 'expenses', 'from_poi_to_this_person',
                 'from_this_person_to_poi', 'fraction_from_poi', 'fraction_to_poi']


GridSearchCV(cv=None,
       estimator=Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=None, whiten=False)), ('tree', DecisionTreeClassifier(compute_importances=None, criterion='gini',
            max_depth=None, max_features=None, max_leaf_nodes=None,
            min_density=None, min_samples_leaf=1, min_samples_split=2,
            random_state=None, splitter='best'))]),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'reduce_dim__n_components': [4, 6, 8], 'tree__random_state': [None, 0, 1, 2, 3]},
       pre_dispatch='2*n_jobs', refit=True, score_func=None,
       scoring='recall', verbose=0)
	Accuracy: 0.78757	Precision: 0.27823	Recall: 0.30550	F1: 0.29123	F2: 0.29963
	Total predictions: 14000	True positives:  611	False positives: 1585	False negatives: 1389	False negatives: 10415

best params: reduce_dim__n_components': [4], 'tree__random_state': [None]},



GridSearchCV(cv=None,
       estimator=Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=None, whiten=False)), ('ada', AdaBoostClassifier(algorithm='SAMME.R', base_estimator=None,
          learning_rate=1.0, n_estimators=50, random_state=None))]),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'ada__n_estimators': [10, 25, 50, 75, 100], 'reduce_dim__n_components': [4, 6, 8], 'ada__algorithm': ['SAMME', 'SAMME.R']},
       pre_dispatch='2*n_jobs', refit=True, score_func=None,
       scoring='recall', verbose=0)
	Accuracy: 0.82236	Precision: 0.29826	Recall: 0.18000	F1: 0.22451	F2: 0.19550
	Total predictions: 14000	True positives:  360	False positives:  847	False negatives: 1640	False negatives: 11153

feature_importances = [ 0.1  0.3  0.1  0.5]
best estimator: Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=4, whiten=False)), ('ada', AdaBoostClassifier(algorithm='SAMME.R', base_estimator=None,
          learning_rate=1.0, n_estimators=10, random_state=None))])
best_params_ : {'ada__n_estimators': 10, 'ada__algorithm': 'SAMME.R', 'reduce_dim__n_components': 4}
explained_variance: [ 3.15418513  1.33320481  1.16153987  0.90319635]
explained_variance_ratio : [ 0.39427314  0.1666506   0.14519248  0.11289954]


GridSearchCV(cv=None,
       estimator=Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=None, whiten=False)), ('forest', RandomForestClassifier(bootstrap=True, compute_importances=None,
            criterion='gini', max_depth=None, max_features='auto',
            max_leaf_nodes=None, min_density=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=10, n_jobs=1,
            oob_score=False, random_state=None, verbose=0))]),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'reduce_dim__n_components': [None, 4, 6, 8], 'forest__n_estimators': [1, 10, 50, 100], 'forest__random_state': [None, 1, 2, 5]},
       pre_dispatch='2*n_jobs', refit=True, score_func=None,
       scoring='recall', verbose=0)
	Accuracy: 0.78343	Precision: 0.24854	Recall: 0.25500	F1: 0.25173	F2: 0.25368
	Total predictions: 14000	True positives:  510	False positives: 1542	False negatives: 1490	False negatives: 10458
best_params_ = {'reduce_dim__n_components': None, 'forest__n_estimators': 1, 'forest__random_state': None}
explained_variance_ = [ 3.13308451  1.34143321  1.16584291  0.89655538  0.62875846  0.37705753  0.3095311   0.14773689]
explained_variance_ratio_ = [ 0.39163556  0.16767915  0.14573036  0.11206942  0.07859481  0.04713219  0.03869139  0.01846711]
n_components_ = 8
feature_importances_ = [ 0.07386286  0.29312855  0.1323309   0.05495747  0.25695021  0.06410041      0.    0.12466958]

GridSearchCV(cv=None,
       estimator=Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=None, whiten=False)), ('tree', DecisionTreeClassifier(compute_importances=None, criterion='gini',
            max_depth=None, max_features=None, max_leaf_nodes=None,
            min_density=None, min_samples_leaf=1, min_samples_split=2,
            random_state=None, splitter='best'))]),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'reduce_dim__n_components': [None, 2, 4, 6, 8], 'tree__random_state': [None, 0, 1, 2, 3]},
       pre_dispatch='2*n_jobs', refit=True, score_func=None,
       scoring='recall', verbose=0)
	Accuracy: 0.79771	Precision: 0.30284	Recall: 0.31950	F1: 0.31095	F2: 0.31602
	Total predictions: 14000	True positives:  639	False positives: 1471	False negatives: 1361	False negatives: 10529
best_params_ = {'reduce_dim__n_components': 6, 'tree__random_state': 2}
best_estimator_ = Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', PCA(copy=True, n_components=6, whiten=False)), ('tree', DecisionTreeClassifier(compute_importances=None, criterion='gini',
            max_depth=None, max_features=None, max_leaf_nodes=None,
            min_density=None, min_samples_leaf=1, min_samples_split=2,
            random_state=2, splitter='best'))])
feature_importances_ = [ 0.41556358  0.27277012  0.06986792  0.07841104  0.09520016  0.06818718]
explained_variance_ = [ 3.13308451  1.34143321  1.16584291  0.89655538  0.62875846  0.37705753]
explained_variance_ratio_ = [ 0.39163556  0.16767915  0.14573036  0.11206942  0.07859481  0.04713219]
PCA inverse_transform(feature_importances_) = [-0.31708397 -0.24039481 -0.28858545 -0.08717065 -0.12424965 -0.05110339  0.02346207  0.06345719]
with all data = Accuracy: 0.78493	Precision: 0.27054	Recall: 0.29800	F1: 0.28361	F2: 0.29207 --- PCA inverse_transform(feature_importances_) = [-0.31708397 -0.24039481 -0.28858545 -0.08717065 -0.12424965 -0.05110339  0.02346207  0.06345719]

'salary',               'bonus',             'total_payments',      'expenses',         'from_poi_to_this_person', 'from_this_person_to_poi', 'fraction_from_poi', 'fraction_to_poi'
[0.097546406918434886, -0.15601412113824881, 0.040231183969354413, 0.059950435612737864, 0.30359206417070322,       0.10179309768930145,        0.1879830082613265, 0.19620953003443412]

Accuracy: 0.78343	Precision: 0.26067	Recall: 0.28100	F1: 0.27045	F2: 0.27668
['salary',    'bonus',      'total_payments', 'expenses',   'from_poi_to_this_person', 'from_this_person_to_poi', 'fraction_from_poi', 'fraction_to_poi', 'fraction_bonus_to_salary']
[ 0.0859543   0.06446843    -0.10915393         0.18586154  0.21697156                  0.11096233                  0.29734185          0.19936043          0.19936043]

--------------------------------------------------------------------------
sunday night
'''
1st
['poi', 'salary', 'bonus', 'total_payments', 'expenses', 'from_poi_to_this_person', 'from_this_person_to_poi', 'fraction_from_poi', 'fraction_to_poi', 'fraction_bonus_to_salary']
#[ 0.01889231  0.1721201   0.26686628  0.31702631  0.          0.05422794  0.10243056  0.0684365   0.        ]
#from_poi_to_this_person, fraction_bonus_to_salary

2nd
[ 0.09828486  0.22634804  0.18747374  0.26882369  0.05422794  0.09640523  0.0684365 ]
[ 0.0808671   0.28057598  0.26686628  0.25505152  0.          0.04820261  0.0684365 ]
from_this_person_to_poi

3rd
[ 0.06709493  0.22634804  0.26686628  0.26882369  0.04820261  0.12266444]
salary, fraction_from_poi

4th
[ 0.22915109  0.36526456  0.40558435  0.        ]
'fraction_to_poi'

5th - final
features: 'bonus', 'total_payments', 'expenses'
importance: [ 0.21759477  0.37769444  0.40471079]
without PCA  - Accuracy: 0.79885	Precision: 0.35195	Recall: 0.36550	F1: 0.35860	F2: 0.36271
features importances: [ 0.21759477  0.4385497   0.34385553]

with PCA - Accuracy: 0.82069	Precision: 0.41811	Recall: 0.42250	F1: 0.42029	F2: 0.42161
feature_importances_: [ 0.45609379  0.17626292  0.36764328]
PCA.inverse_transform(feature_importances_) = [ 0.53803796  0.00427797  0.29111612]

remove total_payments
Accuracy: 0.80636	Precision: 0.46875	Recall: 0.48750	F1: 0.47794	F2: 0.48363
'''
 now tuning classifier

PCA n_components=3 / 3 features
Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', RandomizedPCA(copy=True, iterated_power=3, n_components=3, random_state=None,
       whiten=False)), ('tree', DecisionTreeClassifier(compute_importances=None, criterion='gini',
            max_depth=None, max_features=None, max_leaf_nodes=None,
            min_density=None, min_samples_leaf=1, min_samples_split=2,
            random_state=None, splitter='best'))])
	Accuracy: 0.82162	Precision: 0.42170	Recall: 0.42950	F1: 0.42556	F2: 0.42792
	Total predictions: 13000	True positives:  859	False positives: 1178	False negatives: 1141	True negatives: 9822

PCA n_components=2 / 3 features
Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', RandomizedPCA(copy=True, iterated_power=3, n_components=2, random_state=None,
       whiten=False)), ('tree', DecisionTreeClassifier(compute_importances=None, criterion='gini',
            max_depth=None, max_features=None, max_leaf_nodes=None,
            min_density=None, min_samples_leaf=1, min_samples_split=2,
            random_state=None, splitter='best'))])
	Accuracy: 0.78323	Precision: 0.30616	Recall: 0.32300	F1: 0.31436	F2: 0.31949
	Total predictions: 13000	True positives:  646	False positives: 1464	False negatives: 1354	True negatives: 9536

* PCA n_components=2 / 2 features
	Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', RandomizedPCA(copy=True, iterated_power=3, n_components=2, random_state=None,
       whiten=False)), ('tree', DecisionTreeClassifier(compute_importances=None, criterion='gini',
            max_depth=None, max_features=None, max_leaf_nodes=None,
            min_density=None, min_samples_leaf=1, min_samples_split=2,
            random_state=None, splitter='best'))])
	Accuracy: 0.80500	Precision: 0.46493	Recall: 0.48050	F1: 0.47258	F2: 0.47730
	Total predictions: 11000	True positives:  961	False positives: 1106	False negatives: 1039	True negatives: 7894

2 features / without PCA
	Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('tree', DecisionTreeClassifier(compute_importances=None, criterion='gini',
            max_depth=None, max_features=None, max_leaf_nodes=None,
            min_density=None, min_samples_leaf=1, min_samples_split=2,
            random_state=None, splitter='best'))])
	Accuracy: 0.77573	Precision: 0.39599	Recall: 0.44450	F1: 0.41885	F2: 0.43387
	Total predictions: 11000	True positives:  889	False positives: 1356	False negatives: 1111	True negatives: 7644

PCA n_components=1 / 2 features
Pipeline(steps=[('scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('reduce_dim', RandomizedPCA(copy=True, iterated_power=3, n_components=1, random_state=None,
       whiten=False)), ('tree', DecisionTreeClassifier(compute_importances=None, criterion='gini',
            max_depth=None, max_features=None, max_leaf_nodes=None,
            min_density=None, min_samples_leaf=1, min_samples_split=2,
            random_state=None, splitter='best'))])
	Accuracy: 0.76518	Precision: 0.32883	Recall: 0.28000	F1: 0.30246	F2: 0.28857
	Total predictions: 11000	True positives:  560	False positives: 1143	False negatives: 1440	True negatives: 7857

SET on PCA n_components=2 / 2 features, moving to DecisionTree Classifier tuning
	random_state = None = Accuracy: 0.80727	Precision: 0.47050	Recall: 0.47850	F1: 0.47447	F2: 0.47688
	random_state = 0 = Accuracy: 0.80555	Precision: 0.46520	Recall: 0.46450	F1: 0.46485	F2: 0.46464
	random_state = 1 = Accuracy: 0.80818	Precision: 0.47301	Recall: 0.48200	F1: 0.47746	F2: 0.48018
	random_state = 2 = Accuracy: 0.80782	Precision: 0.47198	Recall: 0.48000	F1: 0.47595	F2: 0.47837
	*random_state = 10 = Accuracy: 0.81018	Precision: 0.47852	Recall: 0.49000	F1: 0.48419	F2: 0.48766
	random_state = 20 = Accuracy: 0.80536	Precision: 0.46532	Recall: 0.47300	F1: 0.46913	F2: 0.47144
	random_state = 40 = Accuracy: 0.80636	Precision: 0.46829	Recall: 0.48000	F1: 0.47407	F2: 0.47761
	random_state = 100 = Accuracy: 0.80727	Precision: 0.47115	Recall: 0.49000	F1: 0.48039	F2: 0.48611
	random_state = 1000 = Accuracy: 0.81064	Precision: 0.47998	Recall: 0.49750	F1: 0.48858	F2: 0.49389

	*min_samples_split = 2 = Accuracy: 0.80982	Precision: 0.47760	Recall: 0.49050	F1: 0.48397	F2: 0.48787
	min_samples_split = 4 = Accuracy: 0.81055	Precision: 0.47808	Recall: 0.45800	F1: 0.46782	F2: 0.46188
	min_samples_split = 6 = Accuracy: 0.80273	Precision: 0.45677	Recall: 0.44900	F1: 0.45285	F2: 0.45053


	all numbers above were taken with StandardScaler scaler. with MinMaxScaler, numbers are:
	Accuracy: 0.76527	Precision: 0.37337	Recall: 0.42900	F1: 0.39926	F2: 0.41659